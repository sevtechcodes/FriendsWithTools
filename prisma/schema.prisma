// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("SUPABASE_DATABASE_URL") //Supabase has been my go-to backend provider
  directUrl = env("SUPABASE_DIRECT_URL")
}

// User - Associated with a clerk user
model User {
  id             String         @id @default(uuid())
  name           String
  lastName       String
  email          String
  password       String
  profilePicture String
  conversations  Conversation[]
  reviews        ToolsReviews[]
  listings       ToolCard[]
  messages       Message[]
  toolrequests   ToolRequest[]
  // User - Associated with a clerk user
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  clerkUserId    String?        @unique
}

model ToolCard {
  id           String         @id @default(uuid())
  name         String
  description  String
  location     String
  dailyRate    Int
  weeklyRate   Int?
  monthlyRate  Int?
  picture      String?
  liked        Boolean
  available    Boolean
  reviews      ToolsReviews[]
  toolrequests ToolRequest[]

  ownerId        String
  owner          User         @relation(fields: [ownerId], references: [id])
  toolCategoryId String
  ToolCategory   ToolCategory @relation(fields: [toolCategoryId], references: [id])
}

model ToolCategory {
  id           String     @id @default(uuid())
  categoryName String?
  tools        ToolCard[]
}

model ToolsReviews {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  toolCardId String
  toolCard   ToolCard @relation(fields: [toolCardId], references: [id])
}

model Conversation {
  id       String    @id @default(uuid())
  messages Message[]

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  authorId       String
  author         User         @relation(fields: [authorId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model ToolRequest {
  id        String   @id @default(uuid())
  status    String
  toolId    String
  tool      ToolCard @relation(fields: [toolId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
